// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    	// upper 3 bits of address indicate which RAM8 to use, lower 3 indicate position in that guy
    	// otherwise the same logic as RAM8

    	DMux8Way(in=true, sel=address[3..5], a=useInnerRam0, b=useInnerRam1, c=useInnerRam2, d=useInnerRam3, e=useInnerRam4, f=useInnerRam5, g=useInnerRam6, h=useInnerRam7);

		And(a=load, b=useInnerRam0, out=load0);
		And(a=load, b=useInnerRam1, out=load1);
		And(a=load, b=useInnerRam2, out=load2);
		And(a=load, b=useInnerRam3, out=load3);
		And(a=load, b=useInnerRam4, out=load4);
		And(a=load, b=useInnerRam5, out=load5);
		And(a=load, b=useInnerRam6, out=load6);
		And(a=load, b=useInnerRam7, out=load7);


    	RAM8(in=in, load=load0, address=address[0..2], out=outInnerRam0);
    	RAM8(in=in, load=load1, address=address[0..2], out=outInnerRam1);
    	RAM8(in=in, load=load2, address=address[0..2], out=outInnerRam2);
    	RAM8(in=in, load=load3, address=address[0..2], out=outInnerRam3);
    	RAM8(in=in, load=load4, address=address[0..2], out=outInnerRam4);
    	RAM8(in=in, load=load5, address=address[0..2], out=outInnerRam5);
    	RAM8(in=in, load=load6, address=address[0..2], out=outInnerRam6);
    	RAM8(in=in, load=load7, address=address[0..2], out=outInnerRam7);

    	Mux8Way16(a=outInnerRam0, b=outInnerRam1, c=outInnerRam2, d=outInnerRam3, e=outInnerRam4, f=outInnerRam5, g=outInnerRam6, h=outInnerRam7, sel=address[3..5], out=out);
}
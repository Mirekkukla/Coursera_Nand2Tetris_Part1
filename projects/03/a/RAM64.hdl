// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    	// upper 3 bits of address indicate which RAM8 to use, lower 3 indicate position in that guy
    	// otherwise the same logic as RAM8

    	DMux8Way(in=load, sel=address[3..5], a=loadInnerRam0, b=loadInnerRam1, c=loadInnerRam2, d=loadInnerRam3, e=loadInnerRam4, f=loadInnerRam5, g=loadInnerRam6, h=loadInnerRam7);

    	RAM8(in=in, load=loadInnerRam0, address=address[0..2], out=outInnerRam0);
    	RAM8(in=in, load=loadInnerRam1, address=address[0..2], out=outInnerRam1);
    	RAM8(in=in, load=loadInnerRam2, address=address[0..2], out=outInnerRam2);
    	RAM8(in=in, load=loadInnerRam3, address=address[0..2], out=outInnerRam3);
    	RAM8(in=in, load=loadInnerRam4, address=address[0..2], out=outInnerRam4);
    	RAM8(in=in, load=loadInnerRam5, address=address[0..2], out=outInnerRam5);
    	RAM8(in=in, load=loadInnerRam6, address=address[0..2], out=outInnerRam6);
    	RAM8(in=in, load=loadInnerRam7, address=address[0..2], out=outInnerRam7);

    	Mux8Way16(a=outInnerRam0, b=outInnerRam1, c=outInnerRam2, d=outInnerRam3, e=outInnerRam4, f=outInnerRam5, g=outInnerRam6, h=outInnerRam7, sel=address[3..5], out=out);
}
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language.
 *
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location.

 * If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM).
 * 
 * The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

        // ALU stuff
    
        // Load the A register if  (assuming the leading bit of the "dest" chunk is a 1)
        // - if its an "a" instruction (load the instruction directly)
        // - if its a "c" instruction and the leading bit of the "dest" chunk is a 1 (load whatever the ALU calculated)
        Not(a=instruction[15], out=isAInstruction);
        Or(a=isAInstruction, b=instruction[5], out=loadARegister);
        Mux16(a=aluOut, b=instruction, sel=isAInstruction, out=aRegisterIn); // if its a c instruction, the ALU decides what the store
        ARegister(in=aRegisterIn, load=loadARegister, out=aRegisterOut);



        DRegister(in=aluOut, load=loadDRegister, out=aluTop);

        Mux16(a=inM, b=aRegisterOut, sel=?, out=aluBottom);

        ALU(x=aluTop, y=aluBottom, zx=?, nx=?, zy=?, ny=?, f=?, no=?, out=aluOut, zr=?, ng=?);





        // Program counter stuff

        PC(in=newInstruction, load=loadNewInstruction, inc=true, reset=reset); // should inc be something else?


}
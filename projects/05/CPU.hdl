// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language.
 *
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location.

 * If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM).
 * 
 * The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

        // ---------------------
        // ALU stuff
        // ---------------------

        // Instruction names will make for easier to understand code
        Not(in=instruction[15], out=isAInstruction);
        Not(in=isAInstruction, out=isCInstruction);

        // Load the A register if:
        // - we have an "a" instruction (load the instruction directly)
        // - we have a "c" instruction and the leftmost bit of the "dest" chunk is a 1 (load whatever the ALU calculated)
        Or(a=isAInstruction, b=instruction[5], out=loadARegister);
        Mux16(a=aluOut, b=instruction, sel=isAInstruction, out=aRegisterIn); // if its a c instruction, the ALU decides what the store
        ARegister(in=aRegisterIn, load=loadARegister, out=aRegisterOut);

        // Load the D register iff we have a "c" instruction and the middle bit of the "dest chunk" is 1
        And(a=isCInstruction, b=instruction[4], out=loadDRegister);
        DRegister(in=aluOut, load=loadDRegister, out=dRegisterOut);

        // Decide whether to use the A or M register for our calculations by looking at the leading bit of the "comp" chunk
        Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=aluYInput); // 0=register A, 1=register M

        // The D register serves as the X input; Y input depends on the leading bit of the "comp" chunk (above)
        // The [c1 ... c6] digits of the "comp" chunk correspond to [zx ... no] ALU inputs
        ALU(x=dRegisterOut, y=aluYInput, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, zr=EQ, ng=LT);

        // Write to the M register iff we have "c" instruction and the rightmost bit of the "dest chunk" is 1
        And(a=isCInstruction, b=instruction[3], out=writeM);
        Mux16(a=aluOut, b=aluOut, sel=true, out=outM); // is there a more elegent way to simply pass through the alu output?

        // Export "address" payload of register A (ie the address of M)
        Mux16(a=aRegisterOut, b=aRegisterOut, sel=true, out[0..14]=addressM); // the leftmost bit gets dropped

        // ---------------------
        // Program counter stuff
        // ---------------------

        // Decide whether or not a presumed "c" instruction wants us to jump
        DMux8Way(in=true, sel=instruction[0..2], a=noJump, b=JGT, c=JEQ, d=JGE, e=JLT, f=JNE, g=JLE, h=JMP);

        // Helper vars for all the "compared to zero" jump conditions
        Not(in=EQ, out=NE);
        Not(in=LT, out=GE);
        And(a=GE, b=NE, out=GT);
        Or(a=LT, b=EQ, out=LE);

        // If a jump is requested and the corresponding condition is fullfilled, we jump
        And(a=JGT, b=GT, out=jump1);
        And(a=JEQ, b=EQ, out=jump2);
        And(a=JGE, b=GE, out=jump3);
        And(a=JLT, b=LT, out=jump4);
        And(a=JNE, b=NE, out=jump5);
        And(a=JLE, b=LE, out=jump6);

        Or8Way(in[0]=JMP, in[1]=jump1, in[2]=jump2, in[3]=jump3, in[4]=jump4, in[5]=jump5, in[6]=jump6, out=jumpBitsSayJump);
        And(a=isCInstruction, b=jumpBitsSayJump, out=shouldJump);

        PC(in=aRegisterOut, load=shouldJump, inc=true, reset=reset, out[0..14]=pc); // the leftmost bit of register A gets dropped
}